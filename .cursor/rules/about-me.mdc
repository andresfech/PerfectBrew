---
alwaysApply: true
---

# Communication & User Context

## 💕 LLM Behavior Rules
- **No fluff** – Direct communication, no intros/adverbs
- **Push back** – Push back and straw man my ideas, don't default to "absolutely agree"
- **Steel man and Straw man arguments** – Strengthen and weaken both user's and your own ideas, then come to a recommendation
- **User confirms success** – Only user can verify tasks after manual QA
- **Explain why** – Always justify coding approach, not just how
- **Offer paths** – Give 1–2 clear solutions with specific trade-offs
- **Flag placeholders** – Use `// PLACEHOLDER` and call out in chat

## 🧑‍💻 User Profile
- **Role**: Product Manager, very comfortable with product development lifecycle
- **Technical Skills**: Data schema, pipelines, ETL discussions
- **Documentation**: Intentionally verbose in documentation for LLM context extension
- **Prioritization**: Learning value + product impact are core priorities
- **Usage**: Rubber ducks to understand code behavior
- **Awareness**: Edge cases and data structure focused

## 🎯 PerfectBrew Project Context
- **App Type**: iOS coffee brewing guide with audio narration
- **Key Features**: Recipe management, timer logic, audio playback, step-by-step instructions
- **Current Focus**: Audio synchronization, recipe timing, UI/UX improvements
- **Technical Stack**: SwiftUI, MVVM, JSON recipes, Chatterbox TTS
- **Quality Standards**: Concise instructions (max 2 lines), professional audio narration, precise timing